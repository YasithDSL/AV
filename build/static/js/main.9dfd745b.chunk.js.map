{"version":3,"sources":["AppBar.js","App.js","reportWebVitals.js","Cell.js","Dijkstras.js","AStar.js","PathfindingIndex.js","Bar.js","Bubble.js","MergeSort.js","Insertion.js","HeapSort.js","SortingIndex.js","AI.js","DetectionIndex.js","index.js"],"names":["ButtonAppBar","props","navigate","useNavigate","isHome","Box","AppBar","position","style","background","Toolbar","align","Button","disabled","id","sx","color","onClick","Typography","variant","component","flexGrow","fontWeight","title","App","className","Paper","elevation","mt","mb","bgcolor","Container","p","borderRadius","border","Divider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Cell","cell_id","object","visited","distance","Number","MAX_VALUE","heuristic","totalcost","label","previous","traversable","this","document","getElementById","parseInt","console","log","dcost","hcost","Dijkstras","a","start_time","performance","now","buttons","querySelectorAll","invBtns","nodes","forEach","button","includes","getAttribute","cell","destination_node","start_node","alert","unvisited_nodes","current_node","count","no_route","prev_count","prev_current_node","lock_count","Object","entries","value","push","length","unvisited_node","current_id","closest_nodes","generate_ids","visit","node","sleep","Promise","resolve","reject","setTimeout","reached_start","end_time","timer","time_taken","Math","round","textContent","opcode","operand","column","floor","new_id","new_id_column","AStar","nodes_list","open_list","current","i","remove","distance_to_neighbor","update_costs","calculate_cost","list","item","res_list","node_column","current_column","node_row","current_row","abs","PathfindingIndex","React","cells","setCells","edit_button","changed","onclick","ml","Grid","container","spacing","columns","arr","map","num","xs","renderButtons","Bar","height","minHeight","size","bars","bar","continueSort","window","confirm","hasSwapped","lastSwapped","j","setColour","temp","setHeight","ms","merge","list1","list2","merged","original","shift","res","sort","b","mid","left","splice","l","r","m","current_bar","heapify","array","n","largest","right","swap","SortingIndex","val","RandomInteger","class","useState","setColumns","setBars","min","max","random","elements","innerHTML","Bubble","MergeSort","Insertion","HeapSort","transform","getPred","image","init","predict","model","prediction","maxPredictions","classPrediction","probability","toFixed","labelContainer","childNodes","results","parseFloat","modelURL","URL","metadataURL","tmImage","getTotalClasses","appendChild","createElement","fileInput","setResults","files","Error","file","reader","FileReader","readAsDataURL","onload","event","setAttribute","target","result","body","classList","add","im","$","get","AI","data","argument","Input","styled","display","htmlFor","accept","onChange","multiple","type","src","valueField","argumentField","text","ReactDOM","render","StrictMode","index","element","path"],"mappings":"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","file":"static/js/main.9dfd745b.chunk.js","sourcesContent":["import * as React from 'react';\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Box from '@mui/material/Box';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport Typography from '@mui/material/Typography';\r\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\r\nimport Button from '@mui/material/Button';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\n\r\nexport default function ButtonAppBar(props) {\r\n  let navigate = useNavigate();\r\n  var isHome = props.isHome == \"true\" ? true : false;\r\n\r\n  return (\r\n    <Box>\r\n      <AppBar position=\"sticky\" style={{background: '#071a2f'}}>\r\n        <Toolbar align=\"center\">\r\n          <Button disabled={isHome} id=\"return\" sx={{color: \"white\"}} onClick={() => { navigate(\"/\") }} ><ArrowBackIcon ></ArrowBackIcon></Button>\r\n          <Typography variant=\"h5\" component=\"div\" sx={{ flexGrow: 1 }} fontWeight=\"bold\">\r\n            {props.title}\r\n          </Typography>\r\n          <Button disabled=\"true\" id=\"return\" sx={{color: \"white\"}} ></Button>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </Box>\r\n  );\r\n}\r\n","import ButtonAppBar from './AppBar.js'\nimport Paper from '@mui/material/Paper'\nimport Container from '@mui/material/Container';\nimport Button from '@mui/material/Button';\nimport Typography from '@mui/material/Typography';\nimport Divider from '@mui/material/Divider';\nimport { useNavigate } from 'react-router-dom';\n\nfunction App() {\n\n  let navigate = useNavigate();\n\n  return (\n    <div className=\"App\">\n      <header>\n      <ButtonAppBar title = \"Algorithm Visualiser\" isHome=\"true\"/>\n      </header>\n      <Paper elevation={0} sx={{ mt: 2, mb: 2, bgcolor: \"#20262d\"}}>\n        <Container sx={{ p: 5, bgcolor: \"#121212\", color: \"#FFFFFF\", borderRadius: 2 , border: 1}} align=\"center\">\n          <Typography variant=\"h4\" sx={{ mt: 2, mb: 2}}>\n          <b>Welcome</b>\n          </Typography>\n          <Typography variant=\"h6\" sx={{ mt: 2, mb: 2}}>\n          Select type of visualisation\n          </Typography>\n          <Divider style={{ background: 'white'}}/>\n          <Button sx={{ p: 2, color: \"white\"}} id=\"Pathfinding\" onClick={() => { navigate(\"/pathfinding\") }}>Pathfinding</Button>\n          <Button sx={{ p: 2, color: \"white\"}} id=\"ArraySort\" onClick={() => { navigate(\"/arraysorting\") }}>Array Sorting</Button>\n          <Divider style={{ background: 'white'}} />\n          <Button sx={{ p: 2, color: \"white\"}} id=\"AI\" onClick={() => { navigate(\"/detection\") }}>Prediction</Button>\n        </Container>\n      </Paper>\n    </div>\n  );\n}\n\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export default class Cell {\r\n    object = null;\r\n    visited = false;\r\n\r\n    distance = Number.MAX_VALUE;\r\n    heuristic = Number.MAX_VALUE;\r\n    totalcost = Number.MAX_VALUE;\r\n\r\n    label = \"blank\";\r\n    previous = null;\r\n    id = null;\r\n    traversable = true;\r\n\r\n\r\n    constructor(cell_id) {\r\n        this.object = document.getElementById(cell_id);\r\n        \r\n        if(this.object.style.color === \"purple\" || this.object.style.color == \"red\") {\r\n            this.visited = true;\r\n        } \r\n        this.id = parseInt(this.object.id);\r\n    }\r\n\r\n    visit() {\r\n        this.visited = true;\r\n        console.log(\"Changed state\");\r\n\r\n        if(this.object.style.color != \"red\" && this.object.style.color != \"green\") {\r\n            this.object.style.color = \"blue\";\r\n        }\r\n    }\r\n\r\n    update_costs(dcost, hcost) { \r\n        this.distance = dcost;\r\n        this.heuristic = hcost;\r\n        this.totalcost = dcost + hcost;\r\n    }\r\n\r\n}","import Cell from './Cell.js';\r\n\r\nexport default async function Dijkstras() {\r\n    var start_time = performance.now();\r\n    var buttons = document.querySelectorAll(\"button\");\r\n    var invBtns = [\"Djikstras\", \"Edit\", \"A-Star\", \"TargetNode\", \"StartNode\", \"Save\", \"Reset\", \"ResetVisitedNodes\", \"Increase\", \"Decrease\"];\r\n    var nodes = {};\r\n    var destination_node;\r\n    var start_node;\r\n    buttons.forEach(button => {\r\n        if(!invBtns.includes(button.getAttribute(\"id\"))) {\r\n            var cell = new Cell(button.id);\r\n            switch(button.style.color) {\r\n                case \"black\":\r\n                    cell.visited = true;\r\n                    break;\r\n                case \"green\":\r\n                    destination_node = cell;\r\n                    break;\r\n                case \"red\":\r\n                    cell.distance = 0;\r\n                    start_node = cell;\r\n                    break;\r\n            }\r\n            nodes[button.id] = cell;\r\n        }\r\n    })\r\n    if(start_node == null || destination_node == null) {\r\n        alert(\"No start or destination node has been specified. Please try again.\");\r\n        return;\r\n    }\r\n    // closest cells = +-1 on id and +- 20 on id\r\n    var unvisited_nodes = [];\r\n    var current_node = start_node;\r\n    var count = 1;\r\n    var no_route = false;\r\n    var prev_count = 0;\r\n    var prev_current_node = null;\r\n    var lock_count = 0;\r\n    while (!destination_node.visited && !no_route) {\r\n        let distance = Number.MAX_VALUE;\r\n\r\n        for (const [key, value] of Object.entries(nodes)) {\r\n            if(!value.visited) {\r\n                unvisited_nodes.push(value);\r\n            }\r\n        }\r\n        if(unvisited_nodes.length == prev_count && prev_current_node == current_node) {\r\n            lock_count = lock_count + 1;\r\n        }\r\n        if (lock_count == 10 ) {\r\n            alert(\"There is no route to the destination node.\");\r\n            no_route = true;\r\n        }\r\n\r\n        // selects closest unvisted node as the current node\r\n        unvisited_nodes.forEach(unvisited_node => {\r\n            if(unvisited_node.distance < distance) {\r\n                current_node = unvisited_node;\r\n                distance = unvisited_node.distance;\r\n            }\r\n        })\r\n        console.log(current_node.id);\r\n        var current_id = current_node.id;\r\n        let closest_nodes = [nodes[generate_ids(current_id, \"-\", 1)], nodes[generate_ids(current_id, \"+\", 1)], nodes[generate_ids(current_id, \"-\", 20)], nodes[generate_ids(current_id, \"+\", 20)]];\r\n        current_node.visit();\r\n\r\n        closest_nodes.forEach(node => {\r\n            if(node != null) {\r\n                if(current_node.distance <= node.distance && node.object.style.color != \"black\" && node.object.style.color != \"red\" && !node.visited) {\r\n                    node.distance = current_node.distance + 1;\r\n                    node.previous = current_node;\r\n                    nodes[node.id] = node;\r\n                }\r\n            }\r\n        })\r\n        nodes[current_node.id].visit();\r\n        prev_count = unvisited_nodes.length;\r\n        prev_current_node = nodes[current_node.id];\r\n        unvisited_nodes = [];\r\n        destination_node = nodes[destination_node.id];\r\n        count = count + 1;\r\n        \r\n        if(count % 4 == 0) {\r\n            let sleep = new Promise((resolve, reject) => {\r\n                setTimeout(() => resolve(), 100)\r\n            });\r\n    \r\n            await sleep;\r\n        };\r\n    }\r\n\r\n    var reached_start = false;\r\n    var current_node = destination_node;\r\n    while(!reached_start && !no_route) {\r\n        var previous = current_node.previous;\r\n        if(previous.id == start_node.id) {\r\n            reached_start = true;\r\n            break;\r\n        }\r\n        previous.object.style.color = \"gold\";\r\n        current_node = previous;\r\n        let sleep = new Promise((resolve, reject) => {\r\n            setTimeout(() => resolve(), 50)\r\n        });\r\n\r\n        await sleep;\r\n    }\r\n\r\n    var end_time = performance.now();\r\n    var timer = document.getElementById(\"timer\");\r\n    var time_taken = Math.round(end_time - start_time);\r\n    timer.textContent = \"The last computation took \" + time_taken + \"ms to complete\";\r\n    var complexity = document.getElementById(\"complexity\");\r\n    complexity.textContent = \"The complexity of this algorithm is O(ElogV) E = Edges, V = Vertices. It doesn't use a heuristic, and is simple to implement.\";\r\n}   \r\n\r\n\r\nfunction generate_ids(id, opcode, operand) { \r\n    var column = Math.floor(id / 20);\r\n    var new_id = opcode == \"-\" ? id - operand : id + operand;\r\n    var new_id_column = Math.floor(new_id / 20);\r\n    if(operand == 1 && new_id_column != column){\r\n        return null;\r\n    } else if (operand == 20 && opcode == \"-\" && new_id_column != column - 1) {\r\n        return null;\r\n    } else if (operand == 20 && opcode == \"+\" && new_id_column != column + 1) {\r\n        return null;\r\n    }\r\n    return new_id;\r\n}","import Cell from './Cell';\r\n\r\nexport default async function AStar() {\r\n    var start_time = performance.now();\r\n    var buttons = document.querySelectorAll(\"button\");\r\n    var invBtns = [\"Djikstras\", \"Edit\", \"A-Star\", \"TargetNode\", \"StartNode\", \"Save\", \"Reset\", \"ResetVisitedNodes\", \"Increase\", \"Decrease\"];\r\n    var nodes = {};\r\n    var destination_node;\r\n    var start_node;\r\n\r\n    var nodes_list = [];\r\n    buttons.forEach(button => {\r\n        if(!invBtns.includes(button.getAttribute(\"id\"))) {\r\n            var cell = new Cell(button.id);\r\n            switch(button.style.color) {\r\n                case \"black\":\r\n                    cell.visited=true;\r\n                    cell.traversable = false;\r\n                    break;\r\n                case \"green\":\r\n                    destination_node = cell;\r\n                    break;\r\n                case \"red\":\r\n                    cell.totalcost = 0;\r\n                    cell.distance = 0;\r\n                    start_node = cell;\r\n                    break;\r\n            }\r\n            nodes[button.id] = cell;\r\n            nodes_list.push(cell);\r\n        }\r\n    });\r\n    if(start_node == null || destination_node == null) {\r\n        alert(\"No start or destination node has been specified. Please try again.\");\r\n        return;\r\n    }\r\n    var visited = [];\r\n    var open_list = [];\r\n    // implement no route feature after initial implementation\r\n    var no_route = false;\r\n    var count = 1;\r\n    open_list.push(start_node);\r\n    while(!destination_node.visited && !no_route) {\r\n        if(open_list.length == 0) {\r\n            alert(\"There is no route to the destination node.\");\r\n            no_route = true;\r\n            continue;\r\n        }\r\n\r\n        var current = open_list[0];\r\n        console.log(open_list.length);\r\n        for(var i = 0; i < open_list.length; i++) {\r\n            if(open_list[i].totalcost < current.totalcost) {\r\n                current = open_list[i];\r\n            }\r\n        }\r\n        \r\n        open_list = remove(open_list, current);\r\n        current.visit();\r\n        visited.push(nodes[current.id]);\r\n        if(current == destination_node) {\r\n            destination_node.visit();\r\n        }\r\n        let current_id = current.id;\r\n        let closest_nodes = [nodes[generate_ids(current_id, \"-\", 1)], nodes[generate_ids(current_id, \"+\", 1)], nodes[generate_ids(current_id, \"-\", 20)], nodes[generate_ids(current_id, \"+\", 20)]];\r\n        for(var i = 0; i < closest_nodes.length; i++) {\r\n            if(closest_nodes[i] != null) {\r\n                if(!closest_nodes[i].traversable || visited.includes(closest_nodes[i])) {\r\n                    console.log(\"not traversable or is in visited list\");\r\n                } else {\r\n                    var distance_to_neighbor = current.distance + 1;\r\n    \r\n                    if(distance_to_neighbor < closest_nodes[i].distance || !open_list.includes(closest_nodes[i])) {\r\n                        console.log(\"A new shortest path has been found or is not in open list\");\r\n                        closest_nodes[i].update_costs(distance_to_neighbor, calculate_cost(destination_node.id, closest_nodes[i].id));\r\n                        closest_nodes[i].previous = current;\r\n                        if(!open_list.includes(closest_nodes[i])) {\r\n                            console.log(\"Added to open list, new length\" + (open_list.length + 1));\r\n                            open_list.push(closest_nodes[i]);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        count = count + 1;\r\n\r\n        if(count % 4 == 0) {\r\n            let sleep = new Promise((resolve, reject) => {\r\n                setTimeout(() => resolve(), 100)\r\n            });\r\n    \r\n            await sleep;\r\n        };\r\n\r\n    }\r\n\r\n    var reached_start = false;\r\n    var current_node = destination_node;\r\n    while(!reached_start && !no_route) {\r\n        var previous = current_node.previous;\r\n        if(previous.id == start_node.id) {\r\n            reached_start = true;\r\n            break;\r\n        }\r\n        previous.object.style.color = \"gold\";\r\n        current_node = previous;\r\n        let sleep = new Promise((resolve, reject) => {\r\n            setTimeout(() => resolve(), 50)\r\n        });\r\n\r\n        await sleep;\r\n    }\r\n\r\n    var end_time = performance.now();\r\n    var timer = document.getElementById(\"timer\");\r\n    var time_taken = Math.round(end_time - start_time);\r\n    timer.textContent = \"The last computation took \" + time_taken + \"ms to complete\";\r\n    var complexity = document.getElementById(\"complexity\");\r\n    complexity.textContent = \"The complexity of this algorithm is O(E) E = Edges. It uses a heuristic and is harder to implement (vs Dijkstras).\";\r\n}\r\n\r\nfunction remove(list, item) {\r\n    var res_list = [];\r\n    for(var i = 0; i < list.length; i++) {\r\n        if(list[i].id != item.id) {\r\n            res_list.push(list[i]);\r\n        }\r\n    }\r\n    return res_list;\r\n}\r\n\r\nfunction calculate_cost(node, current) { \r\n    var node_column = Math.floor(node / 20);\r\n    var current_column = Math.floor(current / 20);\r\n    var node_row = node % 20;\r\n    var current_row = current % 20;\r\n    var cost = Math.abs(current_column - node_column) + Math.abs(current_row - node_row);\r\n    return cost;\r\n}\r\n\r\nfunction generate_ids(id, opcode, operand) { \r\n    var column = Math.floor(id / 20);\r\n    var new_id = opcode == \"-\" ? id - operand : id + operand;\r\n    var new_id_column = Math.floor(new_id / 20);\r\n    if(operand == 1 && new_id_column != column){\r\n        return null;\r\n    } else if (operand == 20 && opcode == \"-\" && new_id_column != column - 1) {\r\n        return null;\r\n    } else if (operand == 20 && opcode == \"+\" && new_id_column != column + 1) {\r\n        return null;\r\n    }\r\n    return new_id;\r\n}","import * as React from 'react';\r\nimport Paper from '@mui/material/Paper'\r\nimport Typography from '@mui/material/Typography';\r\nimport Container from '@mui/material/Container';\r\nimport Button from '@mui/material/Button';\r\nimport Grid from '@mui/material/Grid';\r\nimport CropSquareIcon from '@mui/icons-material/CropSquare';\r\nimport Divider from '@mui/material/Divider';\r\n\r\n\r\nimport Dijkstras from './Dijkstras.js';\r\nimport AStar from './AStar.js';\r\nimport ButtonAppBar from './AppBar.js'\r\n\r\n\r\nexport default function PathfindingIndex() {\r\n  \r\n  const [cells, setCells] = React.useState(300);\r\n\r\n  const renderButtons = () => {\r\n    var arr = [];\r\n\r\n    for(var i = 0; i < cells; i++) {\r\n      arr.push(i)\r\n    }\r\n\r\n    return arr.map((num) => {\r\n      return <Grid item xs={1}>\r\n        <Button cell id={num} sx={{color: \"white\"}} ><CropSquareIcon ></CropSquareIcon></Button>\r\n      </Grid>\r\n    })\r\n  }\r\n\r\n  var invBtns = [\"Djikstras\", \"Edit\", \"A-Star\", \"TargetNode\", \"StartNode\", \"Save\", \"Reset\", \"ResetVisitedNodes\", \"Increase\", \"Decrease\"];\r\n\r\n  function edit_button(id, color) {\r\n    var cell = document.getElementById(id);\r\n    var changed = false;\r\n      \r\n    if(cell.style.color === color){\r\n      cell.style.color = \"white\";\r\n      changed = true;\r\n    } else if(color !== \"black\") {\r\n      let cells = document.querySelectorAll('button');\r\n      cells.forEach(cell => {\r\n        if(!invBtns.includes(cell.getAttribute(\"id\"))) {\r\n          if(cell.style.color === color) {\r\n            cell.style.color = \"white\";\r\n          }\r\n        }\r\n      })\r\n    }\r\n    if(!changed) {\r\n      cell.style.color = color;\r\n    }\r\n  }\r\n\r\n  function Edit() {\r\n    let cells = document.querySelectorAll('button');\r\n    cells.forEach(cell => {\r\n      if(!invBtns.includes(cell.getAttribute(\"id\"))) {\r\n        cell.onclick = function () { edit_button(cell.id, \"black\"); };\r\n      }\r\n    })\r\n  }\r\n\r\n  function StartNode() {\r\n    let cells = document.querySelectorAll('button');\r\n    cells.forEach(cell => {\r\n      if(!invBtns.includes(cell.getAttribute(\"id\"))) {\r\n        cell.onclick = function () { edit_button(cell.id, \"red\"); };\r\n      }\r\n    })\r\n  }\r\n\r\n  function TargetNode() {\r\n    let cells = document.querySelectorAll('button');\r\n    cells.forEach(cell => {\r\n      if(!invBtns.includes(cell.getAttribute(\"id\"))) {\r\n        cell.onclick = function () { edit_button(cell.id, \"green\"); };\r\n      }\r\n    })\r\n  }\r\n\r\n  function Save() { \r\n    let cells = document.querySelectorAll('button');\r\n    cells.forEach(cell => {\r\n      if(!invBtns.includes(cell.getAttribute(\"id\"))) {\r\n        cell.onclick = null;\r\n      }\r\n    })\r\n  }\r\n  \r\n  function Reset() {\r\n    let cells = document.querySelectorAll('button');\r\n    cells.forEach(cell => {\r\n      if(!invBtns.includes(cell.getAttribute(\"id\"))) {\r\n        cell.style.color = \"white\";\r\n      }\r\n    })\r\n  }\r\n\r\n  function ResetVisitedNodes() { \r\n    let cells = document.querySelectorAll('button');\r\n    cells.forEach(cell => {\r\n      if(!invBtns.includes(cell.getAttribute(\"id\")) && (cell.style.color == \"blue\" || cell.style.color == \"gold\")) {\r\n        cell.style.color = \"white\";\r\n      }\r\n    })\r\n  }\r\n\r\n  function Increase() {\r\n    setCells(cells + 100);\r\n  }\r\n\r\n  function Decrease() {\r\n    if(cells > 100) {\r\n      setCells(cells - 100);\r\n    } else {\r\n      alert(\"Cannot decrease cells any further\");\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <header>\r\n      <ButtonAppBar title = \"Pathfinding Algorithms\"/>\r\n      </header>\r\n      <Paper elevation={0} sx={{ mt: 2, mb: 2, bgcolor: \"#20262d\"}}>\r\n        <Container sx={{ p: 1, bgcolor: \"#121212\", color: \"#FFFFFF\", borderRadius: 2 , border: 1}} align=\"center\">\r\n          <Button sx={{ p: 1, color: \"white\"}} id=\"Edit\" onClick={Edit}>Edit Grid</Button>\r\n          <Button sx={{ p: 1, color: \"white\"}} id=\"StartNode\" onClick={StartNode}>Start Node</Button>\r\n          <Button sx={{ p: 1, color: \"white\"}} id=\"TargetNode\" onClick={TargetNode}>Target Node</Button>\r\n          <Button sx={{ p: 1, color: \"white\"}} id=\"Save\" onClick={Save}>Save</Button>\r\n          <Button sx={{ p: 1, color: \"white\"}} id=\"Reset\" onClick={Reset}>Reset Entire Grid</Button>\r\n          <Button sx={{ p: 1, color: \"white\"}} id=\"Increase\" onClick={Increase}>Increase Grid</Button>\r\n          <Button sx={{ p: 1, color: \"white\"}} id=\"Decrease\" onClick={Decrease}>Decrease Grid</Button>\r\n          <Button sx={{ p: 1, color: \"white\"}} id=\"ResetVisitedNodes\" onClick={ResetVisitedNodes}>Reset Visisted Nodes</Button>\r\n          <Divider style={{ background: 'white'}} />\r\n          <Button sx={{ p: 1, color: \"white\", ml: 5}} id=\"Djikstras\" onClick={Dijkstras}>Dijkstra's</Button>\r\n          <Button sx={{ p: 1, color: \"white\"}} id=\"A-Star\" onClick={AStar}>A-Star</Button>\r\n          <Divider style={{ background: 'white'}} />\r\n          <Typography id=\"timer\" sx = {{ p: 1 }} variant=\"h6\">\r\n            The last computation took 0ms to complete\r\n          </Typography>\r\n          <Typography id=\"complexity\" sx = {{ p: 1 }} variant=\"h6\">\r\n            \r\n          </Typography>\r\n        </Container>\r\n      </Paper>\r\n      <Container sx={{ p: 2 }}>\r\n        <Grid container spacing={0} columns={20}>\r\n          {renderButtons()}\r\n        </Grid>\r\n      </Container>\r\n    </>\r\n  );\r\n}","export default class Bar {\r\n    object = null;\r\n    value = 0;\r\n\r\n    constructor(id){\r\n        this.object = document.getElementById(id);\r\n        this.value = parseInt(this.object.getAttribute(\"value\"));\r\n    }\r\n\r\n    setColour(color) {\r\n        this.object.style.background = color;\r\n    }\r\n    \r\n    setHeight(height) {\r\n        this.object.style.minHeight = height + \"px\";\r\n        this.value = height;\r\n    }\r\n}","import Bar from './Bar.js';\r\n\r\nexport default async function Bubble(size) {\r\n    var start_time = performance.now();\r\n    var bars = [];\r\n    for(var i = 0; i < size; i++) {\r\n        var bar = new Bar(i);\r\n        bars.push(bar);\r\n    }\r\n    let continueSort = true;\r\n    if(size > 200) {\r\n        continueSort = window.confirm(\"Bubble sort will take a long time to complete for datasets of this size\");\r\n    }\r\n    if(continueSort) {\r\n        var count = size - 1;\r\n        for(var i = 0; i < count; i++) {\r\n            var hasSwapped = false;\r\n            var lastSwapped = null;\r\n            for(var j = 0; j < count; j++) {\r\n                if(bars[j].value > bars[j + 1].value) {\r\n                    bars[j].setColour(\"green\");\r\n                    bars[j + 1].setColour(\"green\");\r\n                    let sleep = new Promise((resolve, reject) => {\r\n                        setTimeout(() => resolve(), 1)\r\n                    });\r\n                    await sleep;\r\n                    var temp = bars[j].value;\r\n                    bars[j].setHeight(bars[j + 1].value);\r\n                    bars[j + 1].setHeight(temp);\r\n                    bars[j].setColour(\"white\");\r\n                    bars[j + 1].setColour(\"white\");\r\n                    lastSwapped = bars[j+1];\r\n                    hasSwapped = true;\r\n                }\r\n            }\r\n            if(lastSwapped != null) {\r\n                lastSwapped.setColour(\"blue\");\r\n            }\r\n            if(hasSwapped == false) {\r\n                break;\r\n            }\r\n        }\r\n        bars.forEach(bar => {\r\n            bar.setColour(\"blue\");\r\n        })\r\n    }\r\n    var end_time = performance.now();\r\n    var timer = document.getElementById(\"timer\");\r\n    var time_taken = Math.round(end_time - start_time);\r\n    timer.textContent = \"The last computation took \" + time_taken + \"ms to complete\";\r\n    var complexity = document.getElementById(\"complexity\");\r\n    complexity.textContent = \"The complexity of this algorithm is O(n²). It is simple to implement.\";\r\n}","import Bar from './Bar.js';\r\n\r\nfunction sleep(ms) {\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\n\r\nexport default async function MergeSort(size) {\r\n    var start_time = performance.now();\r\n    let bars = [];\r\n    for(var i = 0; i < size; i++) {\r\n        var bar = new Bar(i);\r\n        bars.push(bar);\r\n    }\r\n    await ms(bars);\r\n    var end_time = performance.now();\r\n    var timer = document.getElementById(\"timer\");\r\n    var time_taken = Math.round(end_time - start_time);\r\n    timer.textContent = \"The last computation took \" + time_taken + \"ms to complete\";\r\n    var complexity = document.getElementById(\"complexity\");\r\n    complexity.textContent = \"The complexity of this algorithm is O(n logn). It uses recursion do divide lists and rebuild.\";\r\n}\r\n\r\n\r\nasync function merge(list1, list2) {\r\n    let merged = [];\r\n    let original = [];\r\n    list1.forEach(item => {\r\n        original.push(parseInt(item.object.id));\r\n    })\r\n    list2.forEach(item => {\r\n        original.push(parseInt(item.object.id));\r\n    })\r\n    while(list1.length && list2.length) {\r\n        if(list1[0].value < list2[0].value) {\r\n            merged.push(list1.shift());\r\n        } else {\r\n            merged.push(list2.shift());\r\n        }\r\n    }\r\n    let res = [...merged, ...list1, ...list2];\r\n    original.sort(function(a, b) {\r\n        return a - b;\r\n    });\r\n    for(let i = 0; i < res.length; i ++) {\r\n        document.getElementById(original[i]).style.minHeight = res[i].value + \"px\";\r\n        document.getElementById(original[i]).style.background = \"blue\";\r\n        await sleep(1);\r\n    }\r\n    console.log(original);\r\n    return res;\r\n    \r\n}\r\n\r\nasync function ms(list) { \r\n    let arr = [];\r\n    list.forEach(bar => {\r\n        arr.push(bar);\r\n    })\r\n    const mid = arr.length / 2;\r\n    if(arr.length < 2) {\r\n        return arr;\r\n    } \r\n    const left = arr.splice(0, mid);\r\n    let l = await ms(left);\r\n    let r = await ms(arr);\r\n\r\n    let m = await merge(l, r);\r\n    return m;\r\n}","import Bar from './Bar.js';\r\n\r\nfunction sleep(ms) {\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\n\r\nexport default async function Insertion(size) {\r\n    var start_time = performance.now();\r\n    let bars = [];\r\n    for(var i = 0; i < size; i++) {\r\n        var bar = new Bar(i);\r\n        bars.push(bar);\r\n    }\r\n    let continueSort = true;\r\n    if(size > 200) {\r\n        continueSort = window.confirm(\"Insertion sort will take a long time to complete for datasets of this size\");\r\n    }\r\n    if(continueSort) {\r\n        for(let i = 1; i < bars.length; i++) {\r\n            let current_bar = bars[i].value;\r\n            bars[i].setColour(\"green\");\r\n            let j = i - 1;\r\n            \r\n            while((j > -1) && (current_bar < bars[j].value)) {\r\n                bars[j + 1].value = bars[j].value;\r\n                bars[j + 1].setHeight(bars[j].value);\r\n                await sleep(1);\r\n                j--;\r\n            } \r\n            bars[j+1].value = current_bar;\r\n            bars[j+1].setHeight(current_bar);\r\n            bars[j+1].setColour(\"blue\");\r\n        }\r\n        for(let i = 0; i < bars.length; i++) {\r\n            bars[i].setColour(\"blue\");\r\n            await sleep(1);\r\n        }\r\n        var end_time = performance.now();\r\n        var timer = document.getElementById(\"timer\");\r\n        var time_taken = Math.round(end_time - start_time);\r\n        timer.textContent = \"The last computation took \" + time_taken + \"ms to complete\";\r\n        var complexity = document.getElementById(\"complexity\");\r\n        complexity.textContent = \"The complexity of this algorithm is O(n²). It is simple to implement.\";\r\n    }\r\n\r\n}\r\n","import Bar from './Bar.js';\r\n\r\nfunction sleep(ms) {\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\n\r\nexport default async function HeapSort(size) {\r\n    var start_time = performance.now();\r\n    let bars = [];\r\n    for(var i = 0; i < size; i++) {\r\n        var bar = new Bar(i);\r\n        bars.push(bar);\r\n    }\r\n\r\n    for(var i = Math.floor(size / 2 )- 1; i >= 0; i--) {\r\n        await heapify(bars, size, i);\r\n    }\r\n\r\n    for(var i = size -1; i > 0; i--) {\r\n        var temp = bars[0].value;\r\n        bars[0].setHeight(bars[i].value);\r\n        bars[0].setColour(\"blue\");\r\n        bars[i].setHeight(temp);\r\n        bars[i].setColour(\"blue\");\r\n        await sleep(1);\r\n        await heapify(bars, i, 0);\r\n    }\r\n    var end_time = performance.now();\r\n    var timer = document.getElementById(\"timer\");\r\n    var time_taken = Math.round(end_time - start_time);\r\n    timer.textContent = \"The last computation took \" + time_taken + \"ms to complete\";\r\n    var complexity = document.getElementById(\"complexity\");\r\n    complexity.textContent = \"The complexity of this algorithm is O(n logn). It uses a (max) heap and recursion in this implementation.\";\r\n}\r\n\r\nasync function heapify(array, n, i) {\r\n    let largest = i;\r\n    let left = (2 * i) + 1;\r\n    let right = (2 * i) + 2;\r\n\r\n    if(left < n && array[left].value >= array[largest].value) {\r\n        largest = left;\r\n    }\r\n\r\n    if(right < n && array[right].value >= array[largest].value) {\r\n        largest = right;\r\n    }\r\n\r\n    if(largest != i) {\r\n        let swap = array[i].value;\r\n        array[i].setHeight(array[largest].value);\r\n        array[i].setColour(\"green\");\r\n        array[largest].setHeight(swap);\r\n        array[largest].setColour(\"green\");\r\n        console.log(\"HEY\");\r\n        await sleep(1);\r\n        await heapify(array, n, largest);\r\n    }\r\n}","import * as React from 'react';\r\nimport Paper from '@mui/material/Paper'\r\nimport Typography from '@mui/material/Typography';\r\nimport Container from '@mui/material/Container';\r\nimport Button from '@mui/material/Button';\r\nimport Grid from '@mui/material/Grid';\r\nimport Divider from '@mui/material/Divider';\r\nimport './index.css';\r\nimport { useState } from 'react';\r\n\r\nimport Bubble from './Bubble.js';\r\nimport MergeSort from './MergeSort.js';\r\nimport Insertion from './Insertion.js';\r\nimport HeapSort from './HeapSort.js';\r\nimport ButtonAppBar from './AppBar.js'\r\nimport Bar from './Bar.js';\r\n\r\nexport default function SortingIndex() {\r\n  const renderButtons = (val) => {\r\n    var arr = [];\r\n\r\n    for(var i = 0; i < val; i++) {\r\n      arr.push(i)\r\n    }\r\n\r\n    return arr.map((num) => {\r\n      var height = RandomInteger(1, 500);\r\n      var style = {\r\n          minHeight: height,\r\n          background: \"white\",\r\n      };\r\n      return <Grid item xs={1}>\r\n        <div id=\"wrapper\">\r\n            <div bar id={num} value={height} class=\"verticle-line\" style={style}></div>\r\n        </div>\r\n      </Grid>\r\n    })\r\n  }\r\n\r\n  const [columns, setColumns] = useState(200);\r\n  const [bars, setBars] = useState(renderButtons(columns));\r\n\r\n  function RandomInteger(min, max) {\r\n    return Math.floor(Math.random() * (max - min)) + min;\r\n  }\r\n\r\n  function Randomise() {\r\n    for(var i = 0; i < columns; i++) {\r\n        let bar = document.getElementById(i);\r\n        bar.style.minHeight = \"\" + RandomInteger(1, 500) + \"px\";\r\n    }\r\n  }\r\n\r\n  function Increase() {\r\n      let size = columns;\r\n      if(size < 50) {\r\n        size = columns + 10;\r\n      } else {\r\n        size = columns + 50;\r\n      }\r\n      var elements = renderButtons(size);\r\n      setColumns(size);\r\n      setBars(elements);\r\n    }\r\n\r\n  function Decrease() {\r\n    let size = columns;\r\n    if(size == 10) {\r\n      alert(\"Array size is at a minimum currently\");\r\n    } else {\r\n      if(size <= 50 && size > 10) {\r\n        size = columns - 10;\r\n      }\r\n      else{\r\n        size = columns - 50; \r\n      }\r\n      var elements = renderButtons(size);\r\n      setColumns(size);\r\n      setBars(elements);\r\n    }\r\n  }\r\n  \r\n  async function Reset() {\r\n      for(var i = 0; i < columns; i++) {\r\n        var bar = new Bar(i);\r\n        bar.object.style.background = \"white\";\r\n        let sleep = new Promise((resolve, reject) => {\r\n          setTimeout(() => resolve(), 1)\r\n        });\r\n        await sleep;\r\n    }\r\n    var elements = renderButtons(columns);\r\n    document.getElementById(\"complexity\").innerHTML = \"\";\r\n    setColumns(columns);\r\n    setBars(elements);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <header>\r\n      <ButtonAppBar title = \"Sorting Algorithms\"/>\r\n      </header>\r\n      <Paper elevation={0} sx={{ mt: 2, mb: 2, bgcolor: \"#20262d\"}}>\r\n        <Container sx={{ p: 1, bgcolor: \"#121212\", color: \"#FFFFFF\", borderRadius: 2 , border: 1}} align=\"center\">\r\n          <Button sx={{ p: 1, color: \"white\"}} id=\"Randomise\" onClick={Randomise}>Randomise</Button>\r\n          <Button sx={{ p: 1, color: \"white\"}} id=\"Increase\" onClick={Increase}>Increase Size</Button>\r\n          <Button sx={{ p: 1, color: \"white\"}} id=\"Decrease\" onClick={Decrease}>Decrease Size</Button>\r\n          <Button sx={{ p: 1, color: \"white\"}} id=\"Reset\" onClick={Reset}>Reset</Button>\r\n          <Button sx={{ p: 1, color: \"white\", ml: 5}} id=\"Bubble\" onClick={() => Bubble(columns)}>Bubble</Button>\r\n          <Button sx={{ p: 1, color: \"white\"}} id=\"MergeSort\" onClick={() => MergeSort(columns)}>Merge</Button>\r\n          <Button sx={{ p: 1, color: \"white\"}} id=\"Insertion\" onClick={() => Insertion(columns)}>Insertion</Button>\r\n          <Button sx={{ p: 1, color: \"white\"}} id=\"HeapSort\" onClick={() => HeapSort(columns)}>Heap Sort</Button>\r\n          <Divider style={{ background: 'white'}} />\r\n          <Typography id=\"timer\" sx = {{ p: 1 }} variant=\"h6\">\r\n            The last computation took 0ms to complete\r\n          </Typography>\r\n          <Typography id=\"complexity\" sx = {{ p: 1 }} variant=\"h6\">\r\n          </Typography>\r\n        </Container>\r\n      </Paper>\r\n      <Container id=\"container\" sx={{ p: 2 }}>\r\n        <Grid id=\"grid\" container spacing={0} columns={columns} style={{transform:'rotateX(180deg)'}}>\r\n          {bars}\r\n        </Grid>\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n\r\n","import * as tmImage from '@teachablemachine/image';\r\nimport * as tf from '@tensorflow/tfjs';\r\n\r\n\r\nexport async function getPred(image) {\r\n    \r\n    const URL = \"https://teachablemachine.withgoogle.com/models/df4D78q8s/\";\r\n\r\n\r\n    let model, labelContainer, maxPredictions;\r\n\r\n    async function init() {\r\n        const modelURL = URL + \"model.json\";\r\n        const metadataURL = URL + \"metadata.json\";\r\n\r\n        model = await tmImage.load(modelURL, metadataURL);\r\n        maxPredictions = model.getTotalClasses();\r\n\r\n        labelContainer = document.getElementById(\"label-container\");\r\n        for (let i = 0; i < maxPredictions; i++) { \r\n            labelContainer.appendChild(document.createElement(\"div\"));\r\n        }\r\n    }\r\n\r\n    await init();\r\n\r\n    let results = [];\r\n\r\n    async function predict() {\r\n        const prediction = await model.predict(image);\r\n        for (let i = 0; i < maxPredictions; i++) {\r\n            const classPrediction = prediction[i].className + \" sort: \" + prediction[i].probability.toFixed(2);\r\n            labelContainer.childNodes[i].innerHTML = classPrediction;\r\n            results.push(parseFloat(prediction[i].probability.toFixed(2)))\r\n        }\r\n\r\n    }\r\n\r\n    await predict();\r\n    return results;\r\n\r\n    \r\n}","import * as React from 'react';\r\nimport Paper from '@mui/material/Paper'\r\nimport Typography from '@mui/material/Typography';\r\nimport Container from '@mui/material/Container';\r\nimport './index.css';\r\nimport { useState } from 'react';\r\nimport ButtonAppBar from './AppBar.js'\r\nimport Button from '@mui/material/Button';\r\nimport { styled } from '@mui/material/styles';\r\n\r\nimport {\r\n  Chart,\r\n  PieSeries,\r\n  Title\r\n} from '@devexpress/dx-react-chart-material-ui';\r\n\r\n\r\nimport * as AI from './AI.js';\r\nimport $ from 'jquery';\r\n\r\nexport default function SortingIndex() {\r\n\r\n  let fileInput = document.getElementById(\"file-input\");\r\n  let image = document.getElementById(\"image\");\r\n  \r\n\r\n  const [results, setResults] = useState([25, 25, 25, 25]);\r\n\r\n  async function getImage() {\r\n    fileInput = document.getElementById(\"file-input\");\r\n    image = document.getElementById(\"image\");\r\n    if (!fileInput.files[0]) throw new Error(\"Image not found\");\r\n    const file = fileInput.files[0];\r\n\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(file);\r\n    reader.onload = async function (event) {\r\n      image.setAttribute(\"src\", event.target.result);\r\n      document.body.classList.add(\"image-loaded\");\r\n      let im = $(\"#image\").get(0);\r\n      let res = await AI.getPred(im)\r\n      console.log(res);\r\n      setResults(res);\r\n    };\r\n  }\r\n\r\n  let data = [\r\n    { argument:'Bubble', value: results[0]*100 },\r\n    { argument:'Insertion', value: results[1]*100 },\r\n    { argument:'Merge', value: results[2]*100 },\r\n    { argument:'Heap', value: results[3]*100 },\r\n  ];\r\n\r\n  \r\n  const Input = styled('input')({\r\n    display: 'none',\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <header>\r\n      <ButtonAppBar title =\"Machine Learning Detection Tool\"/>\r\n      </header>\r\n      <Paper elevation={0} sx={{ mt: 2, mb: 2, bgcolor: \"#20262d\"}}>\r\n        <Container sx={{ p: 1, bgcolor: \"#121212\", color: \"#FFFFFF\", borderRadius: 2 , border: 1}} align=\"center\">\r\n          <Typography id=\"timer\" sx = {{ p: 1 }} variant=\"h5\">\r\n            Upload image of dataset to analyse\r\n          </Typography>\r\n          <label htmlFor=\"file-input\">\r\n            <Input accept=\"image/*\" id=\"file-input\" onChange={getImage} multiple type=\"file\" />\r\n            <Button variant=\"contained\" component=\"span\">\r\n              Upload\r\n            </Button>\r\n          </label>\r\n        </Container>\r\n      </Paper>\r\n      <Container id=\"container\" sx={{ p: 2, bgcolor: \"#121212\", color: \"#FFFFFF\", borderRadius: 2 , border: 1 }} align=\"center\">\r\n      <img src=\"\" id=\"image\"/>\r\n      <Paper elevation={0} sx={{ mt: 2, mb: 2, bgcolor: \"#20262d\", border: 1, color: \"#FFFFFF\", borderRadius:2}}>\r\n      <Chart data={data}>\r\n      <PieSeries valueField=\"value\" argumentField=\"argument\" />\r\n      <Title text=\"Probability of each algorithm\"/>\r\n      </Chart>\r\n      <div id='label-container'></div>\r\n      <Typography id=\"Description\" sx = {{ p: 1, color: \"white\"}} variant=\"h6\">\r\n        The following prediction is based on not only the speed at which the algorithm will complete the sort, but also the difficulty\r\n        of implementing the algorithm (simplicity) and the number of swaps required. The prediction is only a guidance, but not always correct.\r\n        Furthermore, Heap sort and Merge sort are much more efficient compared to insertion and bubble sort, especially with larger datasets.\r\n      </Typography>\r\n      </Paper>\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\nimport PathfindingIndex from './PathfindingIndex.js';\nimport SortingIndex from './SortingIndex.js';\nimport DetectionIndex from './DetectionIndex.js';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <Routes>\n        <Route index element={<App />} />\n        <Route path=\"/pathfinding\" element={<PathfindingIndex />} />\n        <Route path=\"/arraysorting\" element={<SortingIndex />} />\n        <Route path=\"/detection\" element={<DetectionIndex />} />\n      </Routes>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}